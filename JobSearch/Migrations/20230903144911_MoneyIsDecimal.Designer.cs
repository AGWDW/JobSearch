// <auto-generated />
using System;
using JobSearch.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobSearch.Migrations
{
    [DbContext(typeof(JobSearchContext))]
    [Migration("20230903144911_MoneyIsDecimal")]
    partial class MoneyIsDecimal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobListingJobSeeker", b =>
                {
                    b.Property<int>("AppliedID")
                        .HasColumnType("int");

                    b.Property<int>("JobsApplyedForID")
                        .HasColumnType("int");

                    b.HasKey("AppliedID", "JobsApplyedForID");

                    b.HasIndex("JobsApplyedForID");

                    b.ToTable("JobListingJobSeeker");
                });

            modelBuilder.Entity("JobSearch.Models.Employer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Employer", (string)null);
                });

            modelBuilder.Entity("JobSearch.Models.JobListing", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("JobStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ListingEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ListingStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("ID");

                    b.HasIndex("EmployerID");

                    b.ToTable("JobListing", (string)null);
                });

            modelBuilder.Entity("JobSearch.Models.JobSeeker", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("JobSeeker", (string)null);
                });

            modelBuilder.Entity("JobListingJobSeeker", b =>
                {
                    b.HasOne("JobSearch.Models.JobSeeker", null)
                        .WithMany()
                        .HasForeignKey("AppliedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSearch.Models.JobListing", null)
                        .WithMany()
                        .HasForeignKey("JobsApplyedForID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSearch.Models.JobListing", b =>
                {
                    b.HasOne("JobSearch.Models.Employer", "Employer")
                        .WithMany("JobListings")
                        .HasForeignKey("EmployerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("JobSearch.Models.Employer", b =>
                {
                    b.Navigation("JobListings");
                });
#pragma warning restore 612, 618
        }
    }
}
